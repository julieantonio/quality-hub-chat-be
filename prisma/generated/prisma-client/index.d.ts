// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chat: (where: ChatWhereUniqueInput) => ChatNullablePromise;
  chats: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chat>;
  chatsConnection: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChat: (data: ChatCreateInput) => ChatPromise;
  updateChat: (args: {
    data: ChatUpdateInput;
    where: ChatWhereUniqueInput;
  }) => ChatPromise;
  updateManyChats: (args: {
    data: ChatUpdateManyMutationInput;
    where?: ChatWhereInput;
  }) => BatchPayloadPromise;
  upsertChat: (args: {
    where: ChatWhereUniqueInput;
    create: ChatCreateInput;
    update: ChatUpdateInput;
  }) => ChatPromise;
  deleteChat: (where: ChatWhereUniqueInput) => ChatPromise;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sender_ASC"
  | "sender_DESC"
  | "reciever_ASC"
  | "reciever_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user1_ASC"
  | "user1_DESC"
  | "user2_ASC"
  | "user2_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MessageUpdateManyWithoutChatInput {
  create?: Maybe<
    MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutChatInput[]
    | MessageUpdateWithWhereUniqueWithoutChatInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutChatInput[]
    | MessageUpsertWithWhereUniqueWithoutChatInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export type ChatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpsertWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChatDataInput;
  create: MessageCreateWithoutChatInput;
}

export interface ChatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user1?: Maybe<String>;
  user1_not?: Maybe<String>;
  user1_in?: Maybe<String[] | String>;
  user1_not_in?: Maybe<String[] | String>;
  user1_lt?: Maybe<String>;
  user1_lte?: Maybe<String>;
  user1_gt?: Maybe<String>;
  user1_gte?: Maybe<String>;
  user1_contains?: Maybe<String>;
  user1_not_contains?: Maybe<String>;
  user1_starts_with?: Maybe<String>;
  user1_not_starts_with?: Maybe<String>;
  user1_ends_with?: Maybe<String>;
  user1_not_ends_with?: Maybe<String>;
  user2?: Maybe<String>;
  user2_not?: Maybe<String>;
  user2_in?: Maybe<String[] | String>;
  user2_not_in?: Maybe<String[] | String>;
  user2_lt?: Maybe<String>;
  user2_lte?: Maybe<String>;
  user2_gt?: Maybe<String>;
  user2_gte?: Maybe<String>;
  user2_contains?: Maybe<String>;
  user2_not_contains?: Maybe<String>;
  user2_starts_with?: Maybe<String>;
  user2_not_starts_with?: Maybe<String>;
  user2_ends_with?: Maybe<String>;
  user2_not_ends_with?: Maybe<String>;
  chat_every?: Maybe<MessageWhereInput>;
  chat_some?: Maybe<MessageWhereInput>;
  chat_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  OR?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  NOT?: Maybe<ChatWhereInput[] | ChatWhereInput>;
}

export interface MessageUpdateManyDataInput {
  sender?: Maybe<String>;
  reciever?: Maybe<String>;
  content?: Maybe<String>;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<String>;
  sender_not?: Maybe<String>;
  sender_in?: Maybe<String[] | String>;
  sender_not_in?: Maybe<String[] | String>;
  sender_lt?: Maybe<String>;
  sender_lte?: Maybe<String>;
  sender_gt?: Maybe<String>;
  sender_gte?: Maybe<String>;
  sender_contains?: Maybe<String>;
  sender_not_contains?: Maybe<String>;
  sender_starts_with?: Maybe<String>;
  sender_not_starts_with?: Maybe<String>;
  sender_ends_with?: Maybe<String>;
  sender_not_ends_with?: Maybe<String>;
  reciever?: Maybe<String>;
  reciever_not?: Maybe<String>;
  reciever_in?: Maybe<String[] | String>;
  reciever_not_in?: Maybe<String[] | String>;
  reciever_lt?: Maybe<String>;
  reciever_lte?: Maybe<String>;
  reciever_gt?: Maybe<String>;
  reciever_gte?: Maybe<String>;
  reciever_contains?: Maybe<String>;
  reciever_not_contains?: Maybe<String>;
  reciever_starts_with?: Maybe<String>;
  reciever_not_starts_with?: Maybe<String>;
  reciever_ends_with?: Maybe<String>;
  reciever_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<String>;
  createdAt_not?: Maybe<String>;
  createdAt_in?: Maybe<String[] | String>;
  createdAt_not_in?: Maybe<String[] | String>;
  createdAt_lt?: Maybe<String>;
  createdAt_lte?: Maybe<String>;
  createdAt_gt?: Maybe<String>;
  createdAt_gte?: Maybe<String>;
  createdAt_contains?: Maybe<String>;
  createdAt_not_contains?: Maybe<String>;
  createdAt_starts_with?: Maybe<String>;
  createdAt_not_starts_with?: Maybe<String>;
  createdAt_ends_with?: Maybe<String>;
  createdAt_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface ChatCreateInput {
  id?: Maybe<ID_Input>;
  user1?: Maybe<String>;
  user2?: Maybe<String>;
  chat?: Maybe<MessageCreateManyWithoutChatInput>;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatWhereInput>;
  AND?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  OR?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  NOT?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
}

export interface MessageCreateManyWithoutChatInput {
  create?: Maybe<
    MessageCreateWithoutChatInput[] | MessageCreateWithoutChatInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface ChatUpsertWithoutChatInput {
  update: ChatUpdateWithoutChatDataInput;
  create: ChatCreateWithoutChatInput;
}

export interface MessageCreateWithoutChatInput {
  id?: Maybe<ID_Input>;
  sender: String;
  reciever: String;
  content: String;
}

export interface ChatUpdateOneRequiredWithoutChatInput {
  create?: Maybe<ChatCreateWithoutChatInput>;
  update?: Maybe<ChatUpdateWithoutChatDataInput>;
  upsert?: Maybe<ChatUpsertWithoutChatInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface ChatUpdateInput {
  user1?: Maybe<String>;
  user2?: Maybe<String>;
  chat?: Maybe<MessageUpdateManyWithoutChatInput>;
}

export interface MessageUpdateInput {
  chat?: Maybe<ChatUpdateOneRequiredWithoutChatInput>;
  sender?: Maybe<String>;
  reciever?: Maybe<String>;
  content?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  chat: ChatCreateOneWithoutChatInput;
  sender: String;
  reciever: String;
  content: String;
}

export interface ChatCreateOneWithoutChatInput {
  create?: Maybe<ChatCreateWithoutChatInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface MessageUpdateWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChatDataInput;
}

export interface MessageUpdateManyMutationInput {
  sender?: Maybe<String>;
  reciever?: Maybe<String>;
  content?: Maybe<String>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface ChatUpdateManyMutationInput {
  user1?: Maybe<String>;
  user2?: Maybe<String>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chat?: Maybe<ChatWhereInput>;
  sender?: Maybe<String>;
  sender_not?: Maybe<String>;
  sender_in?: Maybe<String[] | String>;
  sender_not_in?: Maybe<String[] | String>;
  sender_lt?: Maybe<String>;
  sender_lte?: Maybe<String>;
  sender_gt?: Maybe<String>;
  sender_gte?: Maybe<String>;
  sender_contains?: Maybe<String>;
  sender_not_contains?: Maybe<String>;
  sender_starts_with?: Maybe<String>;
  sender_not_starts_with?: Maybe<String>;
  sender_ends_with?: Maybe<String>;
  sender_not_ends_with?: Maybe<String>;
  reciever?: Maybe<String>;
  reciever_not?: Maybe<String>;
  reciever_in?: Maybe<String[] | String>;
  reciever_not_in?: Maybe<String[] | String>;
  reciever_lt?: Maybe<String>;
  reciever_lte?: Maybe<String>;
  reciever_gt?: Maybe<String>;
  reciever_gte?: Maybe<String>;
  reciever_contains?: Maybe<String>;
  reciever_not_contains?: Maybe<String>;
  reciever_starts_with?: Maybe<String>;
  reciever_not_starts_with?: Maybe<String>;
  reciever_ends_with?: Maybe<String>;
  reciever_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<String>;
  createdAt_not?: Maybe<String>;
  createdAt_in?: Maybe<String[] | String>;
  createdAt_not_in?: Maybe<String[] | String>;
  createdAt_lt?: Maybe<String>;
  createdAt_lte?: Maybe<String>;
  createdAt_gt?: Maybe<String>;
  createdAt_gte?: Maybe<String>;
  createdAt_contains?: Maybe<String>;
  createdAt_not_contains?: Maybe<String>;
  createdAt_starts_with?: Maybe<String>;
  createdAt_not_starts_with?: Maybe<String>;
  createdAt_ends_with?: Maybe<String>;
  createdAt_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface MessageUpdateWithoutChatDataInput {
  sender?: Maybe<String>;
  reciever?: Maybe<String>;
  content?: Maybe<String>;
}

export interface ChatUpdateWithoutChatDataInput {
  user1?: Maybe<String>;
  user2?: Maybe<String>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ChatCreateWithoutChatInput {
  id?: Maybe<ID_Input>;
  user1?: Maybe<String>;
  user2?: Maybe<String>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sender?: Maybe<String>;
  reciever?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface MessagePreviousValues {
  id: ID_Output;
  sender: String;
  reciever: String;
  content: String;
  createdAt: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: () => Promise<String>;
  reciever: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: () => Promise<AsyncIterator<String>>;
  reciever: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChat {
  count: Int;
}

export interface AggregateChatPromise
  extends Promise<AggregateChat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatSubscriptionPayload {
  mutation: MutationType;
  node: Chat;
  updatedFields: String[];
  previousValues: ChatPreviousValues;
}

export interface ChatSubscriptionPayloadPromise
  extends Promise<ChatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValuesPromise>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface ChatEdge {
  node: Chat;
  cursor: String;
}

export interface ChatEdgePromise extends Promise<ChatEdge>, Fragmentable {
  node: <T = ChatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdge>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Message {
  id: ID_Output;
  sender: String;
  reciever: String;
  content: String;
  createdAt: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  chat: <T = ChatPromise>() => T;
  sender: () => Promise<String>;
  reciever: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<String>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chat: <T = ChatSubscription>() => T;
  sender: () => Promise<AsyncIterator<String>>;
  reciever: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<String>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chat: <T = ChatPromise>() => T;
  sender: () => Promise<String>;
  reciever: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<String>;
}

export interface ChatPreviousValues {
  id: ID_Output;
  user1?: String;
  user2?: String;
}

export interface ChatPreviousValuesPromise
  extends Promise<ChatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user1: () => Promise<String>;
  user2: () => Promise<String>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user1: () => Promise<AsyncIterator<String>>;
  user2: () => Promise<AsyncIterator<String>>;
}

export interface Chat {
  id: ID_Output;
  user1?: String;
  user2?: String;
}

export interface ChatPromise extends Promise<Chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  user1: () => Promise<String>;
  user2: () => Promise<String>;
  chat: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<Chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user1: () => Promise<AsyncIterator<String>>;
  user2: () => Promise<AsyncIterator<String>>;
  chat: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatNullablePromise
  extends Promise<Chat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user1: () => Promise<String>;
  user2: () => Promise<String>;
  chat: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatConnection {
  pageInfo: PageInfo;
  edges: ChatEdge[];
}

export interface ChatConnectionPromise
  extends Promise<ChatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatEdge>>() => T;
  aggregate: <T = AggregateChatPromise>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Chat",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
